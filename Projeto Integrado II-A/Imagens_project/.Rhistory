install.packages("tidyverse")
library(tidyverse)
library(caTools)
library(class)
library(rsample)
library(caret)
library(ggplot2)
library(png)
library(DataExplorer)
install.packages("DataExplorer")
library(DataExplorer)
rm(list = ls())
db = iris
pct_train = 0.75
k_grups = 4
# img <- jpeg::readJPEG("plot.jpeg")
plot_missing(db)+
labs(title = "Porcentagem de Dados Faltantes do banco de dados importado",
y = "",
x = "",
fill = "",
colour = "",
caption = "Fonte: Elaboração da equipe da FlyOutlier (2023)")+
scale_fill_manual(values = c(Good = "#b57edc")) + tema
# Condicional ABRE se, e somente se, coluna não-numérica == 1
db_raw <- db %>%
dplyr::mutate_if(is.numeric,
zoo::na.aggregate,
FUN = median,
na.rm = TRUE) %>%
dplyr::mutate_if(is.numeric, scale)
# Division entre base de Treino e Teste
data_split <- rsample::initial_split(data = db_raw,
prop = pct_train)
base_train = rsample::training(data_split) # Base de Treino
base_test  = rsample::testing(data_split)  # Base de Teste
# Seleciona apenas as colunas numéricas e as colunas de classes
# as.data.frame(dplyr::select_if(base_train, function(x) is.numeric(x))
model_knn = class::knn(train = base_train[, base::sapply(base_train, is.numeric)],
test = base_test[, sapply(base_test, is.numeric)],
cl = base_train[, !sapply(base_train, is.numeric)],
k = k_grups)
table_mc = base::table(base_test[, !sapply(base_test, is.numeric)], model_knn) %>%
caret::confusionMatrix()
# Capturar saída da matriz de confusão e estatísticas
output <- capture.output(print(table_mc))
# Criar tabela com kable
knitr::kable(output,
caption = "Model Output: Matriz de Confusão",
format = "pipe",
align = "c")
# Gerar previsões na base de teste
predicted <- data.frame(class_preds = model_knn,
Class = base_test[, !sapply(base_test, is.numeric)])
ConfusionTableR::binary_visualiseR(train_labels = predicted$class_preds,
truth_labels= predicted$Class,
quadrant_col1 = "#b57edc",
quadrant_col2 = "#3d0b60",
custom_title = "Output Model: Matriz de Confusão",
text_col = "black")
install.packages("ConfusionTableR")
library(ConfusionTableR)
ConfusionTableR::binary_visualiseR(train_labels = predicted$class_preds,
truth_labels= predicted$Class,
quadrant_col1 = "#b57edc",
quadrant_col2 = "#3d0b60",
custom_title = "Output Model: Matriz de Confusão",
text_col = "black")
ConfusionTableR::binary_visualiseR(train_labels = predicted$class_preds,
truth_labels= predicted$Class,
quadrant_col1 = "#b57edc",
quadrant_col2 = "#3d0b60",
custom_title = "Output Model: Matriz de Confusão",
text_col = "black")
library(devtools)
library(roxygen2)
library(usethis)
install.packages('tinytex')
install.packages("tinytex")
# install.packages('tinytex')
tinytex::install_tinytex()
tinytex::tlmgr_update()
# Deletando tudo que está no Redis
# Testar em ambiente limpo ---------------------------------------
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
r_conex$DEL(r_conex$KEYS("*"))
# Dados usandos no teste -------------------------------------------
db_iris = iris
CachePlot(db = iris,
type = "density")
CachePlot <- function(db = as.data.frame(),
type = as.character()){
# Conectando ao Redis localmente
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
# Gerando a chave
key_redis <- paste0("plot_", type, "_", base::deparse(substitute(db)))
# Verificar se o gráfico já foi plotado anteriormente
if(r_conex$EXISTS(key_redis) == length(key_redis)){
# Retorna o plote salvo na key-value
print(r_conex$PING()) # Para o usuário saber se está conectado ao Redis
plot_redis <- base::unserialize(r_conex$GET(key = key_redis))
cat(key_redis, "Disponível no banco de dados Redis!")
print(plot_redis)
}else{
# Condicional abre caso não tenha o plote no banco de dados
if(type == "histogram"){
histograma = DataExplorer::plot_histogram(data = db)
hist_serialized = base::serialize(histograma, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, hist_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else if(type == "density"){
density = DataExplorer::plot_density(data = db)
den_serialized = base::serialize(density, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, den_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else{
stop("ERRO: tipo de plote não disponível no sistema de Cache-Redis")
}
}
}
CachePlot(db = iris,
type = "density")
# Deletando tudo que está no Redis
# Testar em ambiente limpo ---------------------------------------
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
r_conex$DEL(r_conex$KEYS("*"))
# Deletando tudo que está no Redis
# Testar em ambiente limpo ---------------------------------------
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
CachePlot(db = iris,
type = "density")
CachePlot <- function(db = as.data.frame(),
type = as.character()){
# Conectando ao Redis localmente
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
# Gerando a chave
key_redis <- paste0("plot_", type, "_", base::deparse(substitute(db)))
# Verificar se o gráfico já foi plotado anteriormente
if(r_conex$EXISTS(key_redis) == length(key_redis)){
# Retorna o plote salvo na key-value
print(r_conex$PING()) # Para o usuário saber se está conectado ao Redis
plot_redis <- base::unserialize(r_conex$GET(key = key_redis))
cat(key_redis, "Disponível no banco de dados Redis!")
print(plot_redis)
}else{
# Condicional abre caso não tenha o plote no banco de dados
if(type == "histogram"){
histograma = DataExplorer::plot_histogram(data = db)
hist_serialized = base::serialize(histograma, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, hist_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else if(type == "density"){
density = DataExplorer::plot_density(data = db)
den_serialized = base::serialize(density, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, den_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else{
stop("ERRO: tipo de plote não disponível no sistema de Cache-Redis")
}
}
}
# Dados usandos no teste -------------------------------------------
db_iris = iris
CachePlot(db = iris,
type = "density")
# Deletando tudo que está no Redis
# Testar em ambiente limpo ---------------------------------------
redis_conn <- redux::redis_connection(redis_config())
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
CachePlot(db = iris,
type = "density")
# Conectando ao Redis localmente
redis_conn <- redux::redis_connection(redis_config())
library(shiny)
library(tidyverse)
library(ggplot2)
library(DataExplorer)
library(redux)
library(readxl)
library(shiny)
library(tidyverse)
library(ggplot2)
library(DataExplorer)
library(redux)
library(readxl)
CachePlot <- function(db = as.data.frame(),
type = as.character()){
# Conectando ao Redis localmente
redis_conn <- redux::redis_connection(redis_config())
r_conex <- redux::hiredis()
# Gerando a chave
key_redis <- paste0("plot_", type, "_", base::deparse(substitute(db)))
# Verificar se o gráfico já foi plotado anteriormente
if(r_conex$EXISTS(key_redis) == length(key_redis)){
# Retorna o plote salvo na key-value
print(r_conex$PING()) # Para o usuário saber se está conectado ao Redis
plot_redis <- base::unserialize(r_conex$GET(key = key_redis))
cat(key_redis, "Disponível no banco de dados Redis!")
print(plot_redis)
}else{
# Condicional abre caso não tenha o plote no banco de dados
if(type == "histogram"){
histograma = DataExplorer::plot_histogram(data = db)
hist_serialized = base::serialize(histograma, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, hist_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else if(type == "density"){
density = DataExplorer::plot_density(data = db)
den_serialized = base::serialize(density, NULL)
# Guardando no banco de dados
print(r_conex$PING())
r_conex$SET(key = key_redis, den_serialized)
cat("Plot", key_redis, "armazenado no Redis com sucesso!")
} else{
stop("ERRO: tipo de plote não disponível no sistema de Cache-Redis")
}
}
}
# Dados usandos no teste -------------------------------------------
db_iris = iris
CachePlot(db = iris,
type = "density")
CachePlot(db = iris,
type = "histogram")
setwd("~/Github/Projetos/ProjetosPUC/Projeto Integrado II-A/Imagens_project")
setwd("~/Github/Projetos/ProjetosPUC/Projeto Integrado II-A/Imagens_project")
knitr::opts_chunk$set(echo = TRUE)
CachePlot(db = iris,
type = "density")
CachePlot(db = iris,
type = "histogram")
