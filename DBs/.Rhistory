setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome))
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome))
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
CleanBase <- function(db, transformation, pct_train, var_target){
set.seed(123)
# Divisao entre base de Treino e Teste
data_split <- rsample::initial_split(data = db,
prop = pct_train)
bases <- list(base_train = rsample::training(data_split),
base_test  = rsample::testing(data_split))
# Pré processando Treino e Teste
# Loop para aplicar as transformações em treino e teste
for(i in seq_along(bases)) {
bases[[i]] <- bases[[i]] %>%
dplyr::select(-dplyr::all_of(var_target)) %>%
# Imputação pré-definida: mediana *\\
# Na presença de dados faltantes imputa de forma automática
dplyr::mutate_if(is.numeric,
zoo::na.aggregate,
FUN = median,
na.rm = TRUE) %>%
# Transformação dos dados c("zscore", "minmax", "log", "log+1", "sqrt", "Box-Cox", "Yeo-Johnson")
dplyr::mutate_if(is.numeric,
~dlookr::transform(., method = transformation)) %>%
dplyr::bind_cols(bases[[i]][dplyr::all_of(var_target)]) # %>%
# Janitor provocando bug na selecão da variável alvo
# janitor::clean_names()
# Salvando bases pré-processadas
switch(names(bases)[i],
base_train = base_train <- base::data.frame(bases[[i]]),
base_test = base_test <- base::data.frame(bases[[i]]))
}
return(bases)
}
db_diabetes = CleanBase(db = diabetes_raw,
transformation = "zscore",
pct_train = 0.75,
var_target = "outcome")
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
var_target = "outcome"
classifier_knn = class::knn(train = base_train |> dplyr::select(-dplyr::all_of(var_target)),
test = base_test |> dplyr::select(-dplyr::all_of(var_target)),
cl = base_train |> dplyr::pull({{ var_target }}),
k = 2,
prob = T)
table_mc = base::table(base_test |> dplyr::pull({{ var_target }}),
classifier_knn) %>%
caret::confusionMatrix()
table_mc
table_mc = base::table(base_test |> dplyr::pull({{ var_target }}), classifier_knn) %>%
caret::confusionMatrix()
table_mc = base::table(base_test |> dplyr::pull({{ var_target }}), classifier_knn) %>%
caret::confusionMatrix() %>% print()
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome))
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome))
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
table_mc = base::table(base_test |> dplyr::pull({{ var_target }}), classifier_knn) %>%
caret::confusionMatrix() %>% print()
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome))
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome))
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
CleanBase <- function(db, transformation, pct_train, var_target){
set.seed(123)
# Divisao entre base de Treino e Teste
data_split <- rsample::initial_split(data = db,
prop = pct_train)
bases <- list(base_train = rsample::training(data_split),
base_test  = rsample::testing(data_split))
# Pré processando Treino e Teste
# Loop para aplicar as transformações em treino e teste
for(i in seq_along(bases)) {
bases[[i]] <- bases[[i]] %>%
dplyr::select(-dplyr::all_of(var_target)) %>%
# Imputação pré-definida: mediana *\\
# Na presença de dados faltantes imputa de forma automática
dplyr::mutate_if(is.numeric,
zoo::na.aggregate,
FUN = median,
na.rm = TRUE) %>%
# Transformação dos dados c("zscore", "minmax", "log", "log+1", "sqrt", "Box-Cox", "Yeo-Johnson")
dplyr::mutate_if(is.numeric,
~dlookr::transform(., method = transformation)) %>%
dplyr::bind_cols(bases[[i]][dplyr::all_of(var_target)]) # %>%
# Janitor provocando bug na selecão da variável alvo
# janitor::clean_names()
# Salvando bases pré-processadas
switch(names(bases)[i],
base_train = base_train <- base::data.frame(bases[[i]]),
base_test = base_test <- base::data.frame(bases[[i]]))
}
return(bases)
}
db_diabetes = CleanBase(db = diabetes_raw,
transformation = "zscore",
pct_train = 0.85,
var_target = "outcome")
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
var_target = "outcome"
classifier_knn = class::knn(train = base_train |> dplyr::select(-dplyr::all_of(var_target)),
test = base_test |> dplyr::select(-dplyr::all_of(var_target)),
cl = base_train |> dplyr::pull({{ var_target }}),
k = 2,
prob = T)
table_mc = base::table(base_test |> dplyr::pull({{ var_target }}), classifier_knn) %>%
caret::confusionMatrix() %>% print()
grid <- expand.grid(.k = seq(1,10, by = 1))
set.seed(123)
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_train[[var_target]] <- as.factor(base_train[[var_target]])
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
base_test[[var_target]] <- as.factor(base_test[[var_target]])
# Pré-configurado ------------------------------------------------------------
# Criando o controle de treinamento fold CV
ctrl <- caret::trainControl(
method = "repeatedcv",
number = 10,
repeats = repetitions,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = TRUE)
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome))
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome))
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
CleanBase <- function(db, transformation, pct_train, var_target){
set.seed(123)
# Divisao entre base de Treino e Teste
data_split <- rsample::initial_split(data = db,
prop = pct_train)
bases <- list(base_train = rsample::training(data_split),
base_test  = rsample::testing(data_split))
# Pré processando Treino e Teste
# Loop para aplicar as transformações em treino e teste
for(i in seq_along(bases)) {
bases[[i]] <- bases[[i]] %>%
dplyr::select(-dplyr::all_of(var_target)) %>%
# Imputação pré-definida: mediana *\\
# Na presença de dados faltantes imputa de forma automática
dplyr::mutate_if(is.numeric,
zoo::na.aggregate,
FUN = median,
na.rm = TRUE) %>%
# Transformação dos dados c("zscore", "minmax", "log", "log+1", "sqrt", "Box-Cox", "Yeo-Johnson")
dplyr::mutate_if(is.numeric,
~dlookr::transform(., method = transformation)) %>%
dplyr::bind_cols(bases[[i]][dplyr::all_of(var_target)]) # %>%
# Janitor provocando bug na selecão da variável alvo
# janitor::clean_names()
# Salvando bases pré-processadas
switch(names(bases)[i],
base_train = base_train <- base::data.frame(bases[[i]]),
base_test = base_test <- base::data.frame(bases[[i]]))
}
return(bases)
}
db_diabetes = CleanBase(db = diabetes_raw,
transformation = "zscore",
pct_train = 0.85,
var_target = "outcome")
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_train[[var_target]] <- as.factor(base_train[[var_target]])
var_target = "outcome"
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_train[[var_target]] <- as.factor(base_train[[var_target]])
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
base_test[[var_target]] <- as.factor(base_test[[var_target]])
# Pré-configurado ------------------------------------------------------------
# Criando o controle de treinamento fold CV
ctrl <- caret::trainControl(
method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = TRUE)
kn = (nrow(base_train) * 0.1) # Pré-configurado como // 10% do tamanho da amostra
tuneGrid_knn <- expand.grid(k = seq(1, kn, by = 1))
model_knn <- caret::train(as.formula(paste(var_target, "~ .")),
data = base_train,
method = "knn",
trControl = ctrl,
#preProcess = c("center", "scale"),
tuneGrid = tuneGrid_knn,
metric = "Accuracy",
maximize = TRUE)
model_knn
kn = (nrow(base_train) * 0.1) # Pré-configurado como // 10% do tamanho da amostra
tuneGrid_knn <- expand.grid(k = seq(1, kn, by = 1))
kn
tuneGrid_knn <- expand.grid(k = seq(1, kn, by = 1))
kn = (nrow(base_train) * 0.01) # Pré-configurado como // 10% do tamanho da amostra
tuneGrid_knn <- expand.grid(k = seq(1, kn, by = 1))
kn
tuneGrid_knn <- expand.grid(k = seq(1, kn, by = 1))
model_knn <- caret::train(as.formula(paste(var_target, "~ .")),
data = base_train,
method = "knn",
trControl = ctrl,
#preProcess = c("center", "scale"),
tuneGrid = tuneGrid_knn,
metric = "Accuracy",
maximize = TRUE)
model_knn
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome))
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome),
title = "Distribuição ")
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
rm(list = ls())
library(tidyverse)
library(janitor)
library(geobr)
library(stringr)
setwd("~/Github/Projetos/DBs")
geo_uf <- geobr::read_state(code_state = "all", year = 2010) %>%
dplyr::mutate(name_state = tolower(name_state)) %>% glimpse()
setwd("~/Github/DBs")
rm(list = ls())
library(tidyverse)
library(janitor)
library(geobr)
library(stringr)
setwd("~/Github/DBs")
geo_uf <- geobr::read_state(code_state = "all", year = 2010) %>%
dplyr::mutate(name_state = tolower(name_state)) %>% glimpse()
# Removendo acentuação
geo_uf$name_state = iconv(geo_uf$name_state, to = "ASCII//TRANSLIT")
# importando dados da PNAD
pnad_raw = readxl::read_excel("PNAD2012-2021.xlsx") %>%
janitor::clean_names() %>%
dplyr::select(ano,
agregacao,
nome,
rdpc,
gini) %>%
filter(agregacao == "UF") %>%
mutate(nome = tolower(nome),
log_renda = rdpc,
log_gini = gini) %>%
rename(name_state = nome) %>%
relocate(ano, .after = NULL)
# removendo acentuação
pnad_raw$name_state = iconv(pnad_raw$name_state, to = "ASCII//TRANSLIT")
bd_model <- merge(pnad_raw,
geo_uf, by = "name_state") %>%
dplyr::relocate(ano, .before = NULL) %>%
dplyr::arrange(-desc(ano))
bd_last_year = bd_model %>%
select(ano,name_state, rdpc) %>%
filter(name_state %in% c("distrito federal",
"goias",
"mato grosso",
"mato grosso do sul"))
ggplot2::ggplot(bd_model)+
aes(y = log_renda,
x = log_gini,
color = name_region)+
geom_point(pch = 19,
size = 2.0)+
geom_smooth(method = "loess")+
labs(title = "U-invertido de Kuznets (2012-2021) - controlando por região",
caption = "Fonte: elaboração do autor com base nos dados da PNAD.",
y = "Log da renda",
x = "Log do Gini",
color = "")+
theme_bw()+
theme(legend.position = "bottom",
plot.caption = element_text(hjust = 0))
ggplot2::ggplot(bd_model)+
aes(y = log_renda,
x = log_gini)+
geom_point(pch = 19,
size = 2.0)+
geom_smooth(method = "loess",
fill = "red",
color = "blue")+
labs(title = "U-invertido de Kuznets (2012-2021) - ajustamento via LOESS",
caption = "Fonte: elaboração do autor com base nos dados da PNAD.",
y = "Log da renda",
x = "Log do Gini",
color = "")+
theme_bw()+
theme(legend.position = "bottom",
plot.caption = element_text(hjust = 0))
ggplot2::ggplot(bd_model)+
aes(y = log_renda,
x = log_gini)+
geom_point(pch = 19)+
geom_smooth(method = "loess")+
labs(title = "U-invertido de Kuznets (2012-2021) - controlando por ano",
caption = "Fonte: elaboração do autor com base nos dados da PNAD.",
y = "Log da renda",
x = "Log do Gini",
color = "")+
theme_bw()+
theme(legend.position = "bottom",
plot.caption = element_text(hjust = 0)) +
facet_wrap(~ano, ncol = 3)
plot_density(bd_model %>% select(log_renda, log_gini))
plot_histogram(bd_model %>% select(log_renda, log_gini))
shapiro.test(bd_model$log_gini)
shapiro.test(bd_model$log_renda)
# ------------------------------------------------------------------------------
model_pooled = lm(formula = log_renda ~ log_gini + as.factor(name_region),
data = bd_model)
summary(model_pooled)
stats::shapiro.test(model_pooled$residuals)
stats::shapiro.test(model_pooled$residuals)
# ------------------------------------------------------------------------------
model_pooled = lm(formula = log_renda ~ log_gini + as.factor(name_region),
data = bd_model)
summary(model_pooled)
summary(model_pooled)
stats::shapiro.test(model_pooled$residuals)
# ------------------------------------------------------------------------------
model_pooled = lm(formula = log_renda ~ log_gini + as.factor(name_region),
data = bd_model)
summary(model_pooled)
# ------------------------------------------------------------------------------
model_pooled = lm(formula = log_renda ~ log_gini + as.factor(name_region),
data = bd_model)
summary(model_pooled)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome),
title = "Distrinuição de Densidade das variáveis analisadas")
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome),
title = "Distribuição de Densidade das variáveis analisadas")
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome),
title = "Distribuição de Frequência das variáveis analisadas")
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
table(diabetes_raw$outcome)
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome),
title = "Distribuição de Densidade das variáveis analisadas")
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome),
title = "Distribuição de Frequência das variáveis analisadas")
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
base_train[[var_target]] <- as.factor(base_train[[var_target]])
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
base_test[[var_target]] <- as.factor(base_test[[var_target]])
rm(list = ls())
grDevices::graphics.off()
setwd("~/Github/Projetos/ProjetosPUC/DBs")
library(tidyverse)
library(DataExplorer)
library(GGally)
library(rsample)
diabetes_raw = utils::read.csv("diabetes.csv") %>%
janitor::clean_names()
#DataExplorer::plot_intro(diabetes_raw)
DataExplorer::plot_density(diabetes_raw %>% select(-outcome),
title = "Distribuição de Densidade das variáveis analisadas")
DataExplorer::plot_histogram(diabetes_raw %>% select(-outcome),
title = "Distribuição de Frequência das variáveis analisadas")
DataExplorer::plot_correlation(diabetes_raw %>% select(-outcome))
plot(table(diabetes_raw$outcome),
main = "Balançeamento da variável alvo",
ylab = "Variável Alvo",
col = "red")
CleanBase <- function(db, transformation, pct_train, var_target){
set.seed(123)
# Divisao entre base de Treino e Teste
data_split <- rsample::initial_split(data = db,
prop = pct_train)
bases <- list(base_train = rsample::training(data_split),
base_test  = rsample::testing(data_split))
# Pré processando Treino e Teste
# Loop para aplicar as transformações em treino e teste
for(i in seq_along(bases)) {
bases[[i]] <- bases[[i]] %>%
dplyr::select(-dplyr::all_of(var_target)) %>%
# Imputação pré-definida: mediana *\\
# Na presença de dados faltantes imputa de forma automática
dplyr::mutate_if(is.numeric,
zoo::na.aggregate,
FUN = median,
na.rm = TRUE) %>%
# Transformação dos dados c("zscore", "minmax", "log", "log+1", "sqrt", "Box-Cox", "Yeo-Johnson")
dplyr::mutate_if(is.numeric,
~dlookr::transform(., method = transformation)) %>%
dplyr::bind_cols(bases[[i]][dplyr::all_of(var_target)]) # %>%
# Janitor provocando bug na selecão da variável alvo
# janitor::clean_names()
# Salvando bases pré-processadas
switch(names(bases)[i],
base_train = base_train <- base::data.frame(bases[[i]]),
base_test = base_test <- base::data.frame(bases[[i]]))
}
return(bases)
}
db_diabetes = CleanBase(db = diabetes_raw,
transformation = "zscore",
pct_train = 0.85,
var_target = "outcome")
var_target = "outcome"
base_train = db_diabetes[["base_train"]] %>% base::as.data.frame()
base_train[[var_target]] <- as.factor(base_train[[var_target]])
base_test = db_diabetes[["base_test"]] %>% base::as.data.frame()
base_test[[var_target]] <- as.factor(base_test[[var_target]])
# Pré-configurado ------------------------------------------------------------
# Criando o controle de treinamento fold CV
ctrl <- caret::trainControl(
method = "repeatedcv",
number = 10,
repeats = 10,
verboseIter = TRUE,
allowParallel = TRUE,
savePredictions = TRUE)
# kn = (nrow(base_train) * 0.01) # Pré-configurado como // 10% do tamanho da amostra
tuneGrid_knn <- expand.grid(k = seq(1, 10, by = 1))
model_knn <- caret::train(as.formula(paste(var_target, "~ .")),
data = base_train,
method = "knn",
trControl = ctrl,
#preProcess = c("center", "scale"),
tuneGrid = tuneGrid_knn,
metric = "Accuracy",
maximize = TRUE)
model_knn
